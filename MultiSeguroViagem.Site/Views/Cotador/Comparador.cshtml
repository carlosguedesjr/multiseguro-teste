@using System.Globalization;
@using System.Web;
@model MultiSeguroViagem.Site.Models.Site.Cotacao.CotacaoCotadorModel
@{
    ViewBag.Title = "Comparador - Seguro Viagem | Multi Seguro Viagem";
    ViewBag.MetaDescription = "Cote seu seguro viagem com até 10 operadoras! Destinos internacionais e nacionais em tempo real no maior comparador do Brasil";
    ViewBag.MetaKeywords = "seguro viagem, seguro de viagem, cotação seguro viagem, cotador seguro viagem, comparador seguro viagem";
    ViewBag.OGURL = "https://multiseguroviagem.com.br/cotador/comparador";
    ViewBag.OGTitle = "Multi Seguro Viagem | Cotações de Seguro Viagem em Tempo Real";
    ViewBag.OGSitename = "Multi Seguro Viagem";
    ViewBag.OGImage = "https://multiseguroviagem.com.br/www/img/multiseguroviagem.jpg";
    string Cpaff = Request["Cpaff"];
    string Navegador = Request.Browser.Browser;
    string Mensagem = null;
    string Nome_Cobertura = null;
    string Preco1 = null;
    string Preco2 = null;
    string Hidden = null;
    decimal PrecoAjuste = 0;
    string PrecoAjusteCompara = null;
    decimal IdadeMaxima = 0;
    string DadosValor = null;
}

<div class="cotacao">
    <div class="header-2">
        <div class="page-header">
            <div class="container">
                <div class="row">
                    <div class="col-md-12 landing-padding-card">
                        <div class="card card-raised card-form-horizontal" id="in-card-card-raised-home">
                            <div class="card-content" id="in-card-card-content-home">

                                @using (Html.BeginForm("Cotacao", "Cotador", FormMethod.Post, new { Id = "frmCotador" }))
                                {
                                    <div class="row">
                                        <div class="col-md-3">
                                            <div class="form-group label-floating has-error">
                                                <label class="control-label">
                                                    @Html.ValidationMessageFor(x => x.Destino, null, new { Class = "control-label" })
                                                </label>
                                            </div>
                                            <div class="input-group">
                                                @if (!Navegador.Equals("Safari"))
                                                {
                                                    <span class="input-group-addon">
                                                        <i class="material-icons">public</i>
                                                    </span>
                                                }
                                                <div class="form-group select-button">
                                                    @Html.DropDownListFor(x => x.Destino, new List<SelectListItem>
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                        new SelectListItem {Text = "Destino", Disabled = true, Selected = true },
                                                                                                                                                                                                                                        new SelectListItem {Text = "Selecione seu destino", Disabled = true },
                                                                                                                                                                                                                                        new SelectListItem {Text = "América do Norte", Value = "1"},
                                                                                                                                                                                                                                        new SelectListItem {Text = "África", Value = "2"},
                                                                                                                                                                                                                                        new SelectListItem {Text = "América Central", Value = "3"},
                                                                                                                                                                                                                                        new SelectListItem {Text = "América do Sul", Value = "4"},
                                                                                                                                                                                                                                        new SelectListItem {Text = "Ásia", Value = "5"},
                                                                                                                                                                                                                                        new SelectListItem {Text = "Brasil", Value = "6"},
                                                                                                                                                                                                                                        new SelectListItem {Text = "Europa", Value = "7"},
                                                                                                                                                                                                                                        new SelectListItem {Text = "Oceania", Value = "8"},
                                                                                                                                                                                                                                        new SelectListItem {Text = "Oriente Médio", Value = "9"}
                                                                                                                                                                                                                                    }, new { Class = "selectpicker", Data_Style = "form-control", Data_Message_Empty = "Selecione um destino" })
                                                </div>
                                            </div>
                                        </div>

                                        <div class="col-md-3">
                                            <div class="form-group label-floating has-error">
                                                <label class="control-label">
                                                    @Html.ValidationMessageFor(x => x.DataIda, null, new { Class = "control-label" })
                                                </label>
                                            </div>

                                            <div class="input-group">
                                                @if (!Navegador.Equals("Safari"))
                                                {
                                                    <span class="input-group-addon">
                                                        <i class="material-icons">flight_takeoff</i>
                                                    </span>
                                                }
                                                <div class="form-group is-empty">
                                                    @if (!Navegador.Equals("Safari"))
                                                    {
                                                        @Html.TextBoxFor(cot => cot.DataIda, new { Class = "form-control datepicker datepickermobile", Placeholder = "Embarque no Brasil", Autocomplete = "off", Data_Message_Empty = "Selecione a data de ida", Data_Type_Validation = "data", Value = Model.DataIda })
                                                    }
                                                    else
                                                    {
                                                        <input autocomplete="off" class="form-control datepicker datepickermobile" data-message-empty="Selecione a data de ida" data-type-validation="data" placeholder="Embarque no Brasil" value="@Model.DataIda" data-val="true" data-val-required="Informe a data de ida" id="DataIda" name="DataIda" type="text">
                                                    }
                                                </div>
                                            </div>
                                        </div>

                                        <div class="col-md-3">

                                            <div class="form-group label-floating has-error">
                                                <label class="control-label">
                                                    @Html.ValidationMessageFor(x => x.DataVolta, null, new { Class = "control-label" })
                                                </label>
                                            </div>

                                            <div class="input-group">
                                                @if (!Navegador.Equals("Safari"))
                                                {
                                                    <span class="input-group-addon">
                                                        <i class="material-icons inv">flight_land</i>
                                                    </span>
                                                }
                                                <div class="form-group is-empty">
                                                    @if (!Navegador.Equals("Safari"))
                                                    {
                                                        @Html.TextBoxFor(cot => cot.DataVolta, new { Class = "form-control datepicker datepickermobile", Placeholder = "Desembarque no Brasil", Autocomplete = "off", Data_Message_Empty = "Selecione a data de volta", Data_Type_Validation = "data", Value = Model.DataVolta })
                                                    }
                                                    else
                                                    {
                                                        <input autocomplete="off" class="form-control datepicker datepickermobile" data-message-empty="Selecione a data de volta" data-type-validation="data" placeholder="Desembarque no Brasil" value="@Model.DataVolta" data-val="true" data-val-required="Informe a data de ida" id="DataVolta" name="DataVolta" type="text">
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <button type="submit" class="btn btn-primary btn-block">Buscar planos</button>
                                        </div>
                                    </div>

                                    <div class="has-error">
                                        <label class="control-label">
                                            @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessage("CotacaoInvalida").ToString()))
                                        </label>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                @if (!Navegador.Equals("Safari"))
                {
                    <div class="resumo-cotacao container hidden-xs hidden-sm" style="margin-top:15px; padding-top:0px !important;">
                        <div class="col-md-3">
                            <p><i class="material-icons">today</i><span>Total de </span><span id="spTotalDiasLegenda"></span><span> dias</span></p>
                        </div>
                        <div class="col-md-3">
                            <p><i class="material-icons">public</i><span id="spDestinoLegenda"></span></p>
                        </div>
                        <div class="col-md-3">
                            <p><i class="material-icons">flight_takeoff</i><span>Embarque em </span><span id="spEmbarqueLegenda"></span></p>
                        </div>
                        <div class="col-md-3">
                            <p><i class="material-icons inv">flight_land</i><span>Desembarque em </span><span id="spDesembarqueLegenda"></span></p>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="main main-raised alturaListaPlanos" id="produtos">
        <div class="container">
            <h1 class="h2 title">Comparador de planos</h1>
            <div class="row" id="no-more-tables">
                <table class="table">
                    <thead class="cf">
                        <tr>
                            <th>Plano</th>
                            @foreach (var plano in Model.Planos)
                            {
                                <th>
                                    <strong>@plano.Operadora.Nome - @plano.Nome</strong>
                                </th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        <tr rowspan="2">
                            <th scope="row">Preço</th>
                            @foreach (var plano2 in Model.Planos)
                                {
                                    if (plano2.PrecoComercial != plano2.Preco)
                                    {

                                        Preco1 = decimal.Parse(plano2.PrecoComercial, new CultureInfo("pt-BR")).ToString("n2");
                                        Preco2 = decimal.Parse(plano2.Preco, new CultureInfo("pt-BR")).ToString("n2");
                                        PrecoAjusteCompara = Preco2;
                                        if (plano2.AjustePorcentagem > 0)
                                        {
                                            PrecoAjuste = (decimal.Parse(plano2.Preco, new CultureInfo("pt-BR")) * (100 / (100 - plano2.AjustePorcentagem)));
                                            PrecoAjusteCompara = PrecoAjuste.ToString("n2");
                                        }
                                        <td data-title="@plano2.Operadora.Nome - @plano2.Nome">
                                            <input class="idPlanoJs" type="hidden" value="@plano2.IdPlano" />
                                            <span class="texto-comparador-email"><b>Idade:</b>&nbsp;@plano2.IdadeMinima - @plano2.IdadeMaxima</span>
                                            <br />
                                            <br />
                                            <b>DE</b>&nbsp;<a class="operadoras-promo">R$ @PrecoAjusteCompara</a>&nbsp; &nbsp; &nbsp;<b>POR</b>&nbsp;R$ @Preco1                                  
                                            <br />
                                       

                                        
                                        </td>
                                    
                                }
                                else
                                {

                                    <td data-title="@plano2.Operadora.Nome - @plano2.Nome">
                                        R$ @decimal.Parse(plano2.PrecoComercial, new CultureInfo("pt-BR")).ToString("n2")  
                                        <input class="idPlanoJs" type="hidden" value="@plano2.IdPlano" />
                                    </td>
                                }
                            }
                        </tr>
                        <tr rowspan="2">
                            <th scope="row">Melhor Idade</th>
                              @foreach (var plano2 in Model.Planos)
                              {
                                  if (plano2.MelhorIdadeMaxima > 0)
                                  {
                                        <td data-title="@plano2.Operadora.Nome - @plano2.Nome">
                                            <input class="idPlanoJs" type="hidden" value="@plano2.IdPlano" />
                                            <span class="texto-comparador-email"><b>Idade:</b>&nbsp;@plano2.MelhorIdadeMinima - @plano2.MelhorIdadeMaxima</span>
                                            <br />
                                            <br />
                                            <b>POR</b>&nbsp; R$ @decimal.Parse(plano2.PrecoMelhorIdade, new CultureInfo("pt-BR")).ToString("n2")
                                            <br />                                      
                                        </td>
                                  }
                                  else
                                  {
                                    <td data-title="@plano2.Operadora.Nome - @plano2.Nome">
                                        <span> - </span>
                                    </td>
                                  }
                              }
                        </tr>

                        <tr rowspan="1">
                            <th scope="row">Efetuar Compra</th>
                            @foreach (var plano2 in Model.Planos)
                            {
                                    <td data-title="@plano2.Operadora.Nome - @plano2.Nome">
                                        <input class="idPlanoJs" type="hidden" value="@plano2.IdPlano" />
                                        @if (!Navegador.Equals("Safari"))
                                        {
                                            
                                                <button class="btn btn-primary comprarJs">
                                                    <i class="material-icons">shopping_cart</i> Comprar
                                                </button>
                                                <br />
                                                <span class="desconto desconto-comparador">+5% de Desconto no Boleto</span>
                                        }
                                        else
                                        {

                                                <button class="btn btn-primary comprarJs">Comprar</button>
                                                <br />
                                                <span class="desconto desconto-comparador">+5% de Desconto no Boleto</span>
                                        }

                                    </td>                           
                            }
                        </tr>







                        <tr>
                            <th scope="row">Assistência Médica</th>
                            @foreach (var plano in Model.Planos)
                            {
                                var cobertura = plano.Coberturas.Where(x => x.Nome == "Assistência Médica").FirstOrDefault();
                                var valor = cobertura != null ? string.Concat(cobertura.MoedaCobertura, " ", $"{Math.Round(cobertura.ValorCobertura, 2):N}") : "-";

                                <td data-title="@plano.Operadora.Nome - @plano.Nome">@valor</td>
                            }
                        </tr>
                        <tr>
                            <th scope="row">Perda de Bagagem</th>
                            @foreach (var plano in Model.Planos)
                            {
                                var cobertura = plano.Coberturas.Where(x => x.Nome == "Perda de Bagagem").FirstOrDefault();
                                var valor = cobertura != null ? string.Concat(cobertura.MoedaCobertura, " ", $"{Math.Round(cobertura.ValorCobertura, 2):N}") : "-";

                                <td data-title="@plano.Operadora.Nome - @plano.Nome">@valor</td>
                            }
                        </tr>
                        <tr>
                            <th scope="row">Gestante</th>
                            @foreach (var plano in Model.Planos)
                            {
                                var cobertura = plano.Coberturas.Where(x => x.Nome == "Gestante").FirstOrDefault();
                                var valor = cobertura != null ? string.Concat(cobertura.MoedaCobertura, " ", $"{Math.Round(cobertura.ValorCobertura, 2):N}") : "-";

                                <td data-title="@plano.Operadora.Nome - @plano.Nome">@valor</td>
                            }
                        </tr>
                        <tr>
                            <th scope="row">Prática de Esporte</th>
                            @foreach (var plano in Model.Planos)
                            {
                                var cobertura = plano.Coberturas.Where(x => x.Nome == "Prática de Esporte").FirstOrDefault();
                                var valor = cobertura != null ? string.Concat(cobertura.MoedaCobertura, " ", $"{Math.Round(cobertura.ValorCobertura, 2):N}") : "-";

                                <td data-title="@plano.Operadora.Nome - @plano.Nome">@valor</td>
                            }
                        </tr>
                        <tr>
                            <th scope="row">Doença Pré-Existente</th>
                            @foreach (var plano in Model.Planos)
                            {
                                var cobertura = plano.Coberturas.Where(x => x.Nome == "Doença Pré-Existente").FirstOrDefault();
                                var valor = cobertura != null ? string.Concat(cobertura.MoedaCobertura, " ", $"{Math.Round(cobertura.ValorCobertura, 2):N}") : "-";

                                <td data-title="@plano.Operadora.Nome - @plano.Nome">@valor</td>
                            }
                        </tr>
                        <tr>
                            <th scope="row">Marítimo-Cruzeiro</th>
                            @foreach (var plano in Model.Planos)
                            {
                                var cobertura = plano.Coberturas.Where(x => x.Nome == "Marítimo Cruzeiro").FirstOrDefault();
                                var valor = cobertura != null ? "Sim" : "Não";

                                <td data-title="@plano.Operadora.Nome - @plano.Nome">@valor</td>

                            }
                        </tr>



                        <tr>
                            <th scope="row">Todas as coberturas</th>
                            @foreach (var plano in Model.Planos)
                            {
                                var lamina = plano.Arquivos.Where(x => x.TipoArquivo == "LaminaCoberturas").FirstOrDefault();

                                <td data-title="@plano.Operadora.Nome - @plano.Nome">
                                    <a href="https://downloads.multiseguroviagem.com.br/downloads/@lamina.IdFileUploads/@lamina.DataCadastro" target="_blank">Download</a>
                                </td>
                            }
                        </tr>

                        <tr>
                            <th scope="row">Mais Informações</th>
                            @foreach (var plano in Model.Planos)
                            {
                                var cobertura = plano.Coberturas.Where(x => x.MensagemPlano != null).FirstOrDefault();
                                var valor = "-";
                                if (cobertura != null && cobertura.MensagemPlano != "")
                                {
                                    valor = "Mais Info";
                                }

                                if (valor == "Mais Info")
                                {
                                    Mensagem = cobertura.MensagemPlano;
                                    Nome_Cobertura = cobertura.Nome;
                                    <td data-title="@plano.Operadora.Nome - @plano.Nome"><button rel="@Mensagem" string="@Nome_Cobertura" type="button" class="MaisInfo info_comparador" data-toggle="modal" data-target="#myModal">+ Info</button></td>
                                }
                                else
                                {
                                    <td data-title="@plano.Operadora.Nome - @plano.Nome">@valor</td>
                                }
                            }
                        </tr>
                    </tbody>
                </table>
            </div>

            <button class="btn btn-default btn-round voltarCotacao"><i class="material-icons">keyboard_arrow_left</i> Voltar</button>
            <button class="btn btn-lg btn-success btn-round enviarComparacao"><i class="material-icons">email</i> Enviar por email</button>
        </div>
    </div>
</div>

<div id="EnviarEmailModal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title">Comparação por e-mail</h4>
            </div>
            <div class="modal-body">
                <p>Envie essa comparação do seu Seguro Viagem por e-mail e acesse quando quiser.</p>

                @using (Html.BeginForm("EnviarComparacao", "Cotador", FormMethod.Post, new { Id = "frmEnviarComparacao" }))
                {
                    <input class="form-control" type="email" id="Email" name="Email" placeholder="E-mail" required />

                    <button type="button" class="btn btn-default" data-dismiss="modal">Fechar</button>
                    <button type="submit" class="btn btn-success">Enviar <i class="material-icons">send</i></button>
                }
            </div>
        </div>
    </div>
</div>
<!-- Modal -->
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title modal-maisTitle" id="myModalLabel"></h4>
            </div>
            <div class="modal-body modal-maisInfo">

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<link href="/www/css/vendor/sweetalert2.min.css" rel="stylesheet" />

@section Scripts
{
    @if (HttpContext.Current.IsDebuggingEnabled)
    {
        <script src="/www/js/vendor/moment-with-locales.min.js"></script>
        <script src="/www/js/vendor/sweetalert2.min.js"></script>
        <script src="/www/js/vendor/date-input-polyfill.dist.js"></script>
        <script src="/www/js/vendor/bootstrap-datetimepicker.js"></script>
        <script src="/www/js/vendor/jquery.mask.min.js"></script>
        <script src="/www/js/modulos/datePicker.js"></script>
        <script src="/www/js/modulos/cotacao.js"></script>
    }
    else
    {
        <script src="/www/bundles/bundleVendorCotador.js"></script>
        <script src="/www/js/modulos/cotacao.js"></script>
        <script async defer src="/www/js/modulos/afiliaceTrackerOffer.js"></script>
        <script src="/www/js/vendor/sweetalert2.min.js"></script>
    }

    <script>
        setaUtmSource();
        setaCupomAfiliado();

        var aff = obtemParametroUri('Cpaff');



        if (window.sessionStorage.getItem('cpaff')) {
            $('#Cpaff').val(window.sessionStorage.getItem('cpaff'));
        }

        $("body").addClass("gradiente-cotacao");

        if (isMobile(navigator.userAgent)) {


            $('#DataIda').on('focus touchstart touchend touchcancel touchleave touchmove',
                function () {
                    this.type = 'date';
                });

            $('#DataIda').on('select change',
                function (obj) {
                    this.type = 'text';
                    if (obj.target.value !== '') {
                        var data = obj.target.value.replace(/-/g, "/");
                        if (!isNaN(new Date(data))) this.value = formataDataMobile(new Date(data));
                    }
                });

            $('#DataVolta').on('focus touchstart touchend touchcancel touchleave touchmove',
                function () {
                    this.type = 'date';
                });

            $('#DataVolta').on('select change',
                function (obj) {
                    this.type = 'text';

                    if (obj.target.value !== '') {
                        var data = obj.target.value.replace(/-/g, "/");
                        if (!isNaN(new Date(data))) this.value = formataDataMobile(new Date(data));
                    }
                });

        } else {
            (function legendas() {

                var dataIda = $('#DataIda').val();
                var dataVolta = $('#DataVolta').val();
                $('#spDestinoLegenda').text($('#Destino option:selected').text());
                $('#spEmbarqueLegenda').text(dataIda);
                $('#spDesembarqueLegenda').text(dataVolta);
                if (isNaN(dataIda) && isNaN(dataVolta))
                    $('#spTotalDiasLegenda').text(calculaDias(dataIda, dataVolta));

            })();

            /*  $('.datepicker').datetimepicker({
                  useCurrent: false,
                  format: 'DD/MM/YYYY',
                  locale: 'pt-br',
                  icons: {
                      time: "fa fa-clock-o",
                      date: "fa fa-calendar",
                      up: "fa fa-chevron-up",
                      down: "fa fa-chevron-down",
                      previous: 'fa fa-chevron-left',
                      next: 'fa fa-chevron-right',
                      today: 'fa fa-screenshot',
                      clear: 'fa fa-trash',
                      close: 'fa fa-remove',
                      inline: true
                  }
              });

              $('.selectpicker').selectpicker({
                  dropupAuto: false
              });
          }
          */
            datepickerSetup();
        }


        setSession('comparador', '@Html.Raw(Json.Encode(Model))');
        setSession('contador', 0);

        $('.comprarJs').on('click', function () {
            var idPlano = $(this).siblings("input.idPlanoJs").val();

            var uriViajantes = '@Url.Action("Viajantes", "Viajante")' + '/' + idPlano;

            window.sessionStorage.setItem("cotacao", window.sessionStorage.getItem("comparador").replace(/(\r\n|\n|\r)/g,""));
            window.location.href = uriViajantes;
        });

        $('.enviarComparacao').on('click', function() {
            $("#EnviarEmailModal").modal();
        });

        $('.voltarCotacao').on('click', function() {
            $('#frmCotador button[type="submit"]').trigger('click');
        });

        $('#frmEnviarComparacao').on('submit', function(evt) {
            evt.preventDefault();

            var comparacao = JSON.parse(window.sessionStorage.comparador.replace(/(\r\n|\n|\r)/g,"") || "{}");
            console.log(comparacao);
            var model = {
                idDestino: comparacao.Destino,
                destino: $('#Destino :selected').text(),
                dataIda: $('#DataIda').val(),
                dataVolta: $('#DataVolta').val(),
                email: $('#Email').val(),
                emailVendedor: window.sessionStorage.emailVendedor || '',
                planosId: obtemParametroUri('itens') || '',
                nome: obtemParametroUri('Nome') || '',
                cpaff: obtemParametroUri('Cpaff'),
                planos: comparacao.Planos
            };

            $.post("@Url.Action("EnviarComparacao", "Cotador")", model)
            .done(function(json) {
                if (json.sucesso) {
                    $("#EnviarEmailModal").modal('toggle');

                    swal({
                        position: 'center',
                        type: 'success',
                        title: 'Comparação Enviada',
                        showConfirmButton: true
                    });
                } else {
                    $("#EnviarEmailModal").modal('toggle');

                    swal({
                        position: 'center',
                        type: 'error',
                        title: 'Ocorreu um problema ao enviar a comparação!',
                        showConfirmButton: true
                    });
                }
            });
        });

        $('#myModal').on('shown.bs.modal', function () {
            $('#myInput').focus();

        });

        $('.MaisInfo').on('click', function (obj) {

            var mensagem = $(this).attr('rel');
            var titulo = $(this).attr('string');
            $('.modal-maisInfo').html(mensagem);
            $('.modal-maisTitle').html("Mais Detalhes");

        });
        $('#Email').val(window.sessionStorage.email || '');



    </script>
}
